%{
#include <stdio.h>
int line_number = 1;
int yywrap(void) { return 1; }
%}

%%

[a-zA-Z_][a-zA-Z0-9_]*     { printf("Identifier: %s\n", yytext); }
[0-9]+                     { printf("Integer Constant: %s\n", yytext); }
[0-9]+\.[0-9]+             { printf("Float Constant: %s\n", yytext); }
'\''.(\\[ntbr0\'\"\\])?'\''  { printf("Character Constant: %s\n", yytext); }
\"([^\"\\]|\\.)*\"         { printf("String Literal: %s\n", yytext); }

"#".*                      { printf("Preprocessor Directive: %s\n", yytext); }

"=="|"!="|"<="|">="|"<"|">"     { printf("Relational Operator: %s\n", yytext); }
"&&"|"||"|"!"                   { printf("Logical Operator: %s\n", yytext); }
"&"|"|"|"^"|"~"                 { printf("Bitwise Operator: %s\n", yytext); }
"="|"+="|"-="|"*="|"/="|"%="    { printf("Assignment Operator: %s\n", yytext); }
"+"|"-"|"*"|"/"|"%"             { printf("Arithmetic Operator: %s\n", yytext); }

"(" | ")" | "[" | "]" | "{" | "}" | ";" | "," | "." | "->" | "::"  
                            { printf("Delimiter: %s\n", yytext); }

"//".*                         { /* Single-line comment – skip */ }
/\*([^*]|\*+[^*/])*\*+/        { /* Multi-line comment – skip */ }

[\n]                           { line_number++; }
[ \t\r]+                       { /* Skip whitespace */ }

.                              { printf("Unknown or Invalid Token: %s\n", yytext); }

%%

int main() {
    printf("Starting tokenization...\n");
    yylex();
    printf("Tokenization complete.\n");
    return 0;
}
